// <auto-generated />
using System;
using Atron.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Atron.Infrastructure.Migrations
{
    [DbContext(typeof(AtronDbContext))]
    [Migration("20250708142702_IniciandoBaseRemota")]
    partial class IniciandoBaseRemota
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Atron.Domain.Componentes.PropriedadeDeFluxoModulo", b =>
                {
                    b.Property<int>("ModuloId")
                        .HasColumnType("int");

                    b.Property<string>("ModuloCodigo")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("PropriedadeDeFluxoId")
                        .HasColumnType("int");

                    b.Property<string>("PropriedadeDeFluxoCodigo")
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("ModuloId", "ModuloCodigo", "PropriedadeDeFluxoId", "PropriedadeDeFluxoCodigo");

                    b.HasIndex("PropriedadeDeFluxoId", "PropriedadeDeFluxoCodigo");

                    b.ToTable("PropriedadeDeFluxoModulo");
                });

            modelBuilder.Entity("Atron.Domain.Componentes.PropriedadesDeFluxo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Codigo")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id", "Codigo");

                    b.ToTable("PropriedadesDeFluxo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codigo = "GRAVAR"
                        },
                        new
                        {
                            Id = 2,
                            Codigo = "CONSULTAR"
                        },
                        new
                        {
                            Id = 3,
                            Codigo = "DELETAR"
                        },
                        new
                        {
                            Id = 4,
                            Codigo = "ATUALIZAR"
                        });
                });

            modelBuilder.Entity("Atron.Domain.Entities.Auditoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AlteradoPor")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool?>("Inativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModuloCodigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("RemovidoEm")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Auditorias");
                });

            modelBuilder.Entity("Atron.Domain.Entities.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Codigo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DepartamentoCodigo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id", "Codigo");

                    b.HasIndex("DepartamentoId", "DepartamentoCodigo");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("Atron.Domain.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("RemovidoEm")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasAlternateKey("Codigo");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasDatabaseName("IX_Categoria_Codigo");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("Atron.Domain.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CNPJ")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("CPF")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("Atron.Domain.Entities.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Codigo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id", "Codigo");

                    b.ToTable("Departamentos");
                });

            modelBuilder.Entity("Atron.Domain.Entities.Historico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuditoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.HasKey("Id");

                    b.HasIndex("AuditoriaId");

                    b.ToTable("Historicos");
                });

            modelBuilder.Entity("Atron.Domain.Entities.Modulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Codigo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id", "Codigo");

                    b.ToTable("Modulos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codigo = "DPT",
                            Descricao = "Departamentos"
                        },
                        new
                        {
                            Id = 2,
                            Codigo = "CRG",
                            Descricao = "Cargos"
                        },
                        new
                        {
                            Id = 3,
                            Codigo = "USR",
                            Descricao = "Usuários"
                        },
                        new
                        {
                            Id = 4,
                            Codigo = "TAR",
                            Descricao = "Tarefas"
                        },
                        new
                        {
                            Id = 5,
                            Codigo = "SAL",
                            Descricao = "Salários"
                        },
                        new
                        {
                            Id = 6,
                            Codigo = "PAC",
                            Descricao = "Políticas e Acessos"
                        });
                });

            modelBuilder.Entity("Atron.Domain.Entities.PerfilDeAcesso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Codigo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UsuarioCodigo")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id", "Codigo");

                    b.HasIndex("UsuarioId", "UsuarioCodigo");

                    b.ToTable("PerfisDeAcesso");
                });

            modelBuilder.Entity("Atron.Domain.Entities.PerfilDeAcessoModulo", b =>
                {
                    b.Property<int>("PerfilDeAcessoId")
                        .HasColumnType("int");

                    b.Property<string>("PerfilDeAcessoCodigo")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("ModuloId")
                        .HasColumnType("int");

                    b.Property<string>("ModuloCodigo")
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("PerfilDeAcessoId", "PerfilDeAcessoCodigo", "ModuloId", "ModuloCodigo");

                    b.HasIndex("ModuloId", "ModuloCodigo");

                    b.ToTable("PerfilDeAcessoModulos");
                });

            modelBuilder.Entity("Atron.Domain.Entities.PerfilDeAcessoUsuario", b =>
                {
                    b.Property<int>("PerfilDeAcessoId")
                        .HasColumnType("int");

                    b.Property<string>("PerfilDeAcessoCodigo")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioCodigo")
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("PerfilDeAcessoId", "PerfilDeAcessoCodigo", "UsuarioId", "UsuarioCodigo");

                    b.HasIndex("UsuarioId", "UsuarioCodigo");

                    b.ToTable("PerfilDeAcessoUsuarios");
                });

            modelBuilder.Entity("Atron.Domain.Entities.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("QuantidadeEmEstoque")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("RemovidoEm")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VendaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("Codigo");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasDatabaseName("IX_Produto_Codigo");

                    b.HasIndex("VendaId");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("Atron.Domain.Entities.ProdutoCategoria", b =>
                {
                    b.Property<int>("ProdutoId")
                        .HasColumnType("int");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("CategoriaCodigo")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ProdutoCodigo")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("ProdutoId", "CategoriaId");

                    b.HasIndex("CategoriaId");

                    b.ToTable("ProdutoCategoria", (string)null);
                });

            modelBuilder.Entity("Atron.Domain.Entities.Salario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Ano")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int>("MesId")
                        .HasMaxLength(12)
                        .HasColumnType("int");

                    b.Property<int>("SalarioMensal")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioCodigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId", "UsuarioCodigo")
                        .IsUnique();

                    b.ToTable("Salarios");
                });

            modelBuilder.Entity("Atron.Domain.Entities.Tarefa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Conteudo")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<DateTime>("DataFinal")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicial")
                        .HasColumnType("datetime2");

                    b.Property<int>("TarefaEstadoId")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UsuarioCodigo")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId", "UsuarioCodigo");

                    b.ToTable("Tarefas");
                });

            modelBuilder.Entity("Atron.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Codigo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int?>("SalarioAtual")
                        .HasColumnType("int");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id", "Codigo");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Atron.Domain.Entities.UsuarioCargoDepartamento", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioCodigo")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<string>("CargoCodigo")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<string>("DepartamentoCodigo")
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("UsuarioId", "UsuarioCodigo", "CargoId", "CargoCodigo", "DepartamentoId", "DepartamentoCodigo");

                    b.HasIndex("CargoId", "CargoCodigo");

                    b.HasIndex("DepartamentoId", "DepartamentoCodigo");

                    b.ToTable("UsuarioCargoDepartamento", (string)null);
                });

            modelBuilder.Entity("Atron.Domain.Entities.Venda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoriaCodigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("ClienteCodigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataVenda")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PrecoDoProduto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProdutoCodigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int");

                    b.Property<int>("QuantidadeDeProdutoVendido")
                        .HasColumnType("int");

                    b.Property<bool>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("RemovidoEm")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId", "CategoriaCodigo");

                    b.HasIndex("ClienteId", "ClienteCodigo");

                    b.HasIndex("ProdutoId", "ProdutoCodigo");

                    b.ToTable("Vendas", (string)null);
                });

            modelBuilder.Entity("Shared.Models.ApplicationModels.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AppRole", (string)null);
                });

            modelBuilder.Entity("Shared.Models.ApplicationModels.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppRoleClaim", (string)null);
                });

            modelBuilder.Entity("Shared.Models.ApplicationModels.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("RefreshTokenExpireTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AppUser", (string)null);
                });

            modelBuilder.Entity("Shared.Models.ApplicationModels.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaim", (string)null);
                });

            modelBuilder.Entity("Shared.Models.ApplicationModels.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserLogin", (string)null);
                });

            modelBuilder.Entity("Shared.Models.ApplicationModels.ApplicationUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRole", (string)null);
                });

            modelBuilder.Entity("Shared.Models.ApplicationModels.ApplicationUserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Value")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AppUserToken", (string)null);
                });

            modelBuilder.Entity("Atron.Domain.Componentes.PropriedadeDeFluxoModulo", b =>
                {
                    b.HasOne("Atron.Domain.Entities.Modulo", "Modulo")
                        .WithMany("PropriedadeDeFluxoModulos")
                        .HasForeignKey("ModuloId", "ModuloCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Atron.Domain.Componentes.PropriedadesDeFluxo", "PropriedadesDeFluxo")
                        .WithMany("PropriedadesDeFluxoModulo")
                        .HasForeignKey("PropriedadeDeFluxoId", "PropriedadeDeFluxoCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modulo");

                    b.Navigation("PropriedadesDeFluxo");
                });

            modelBuilder.Entity("Atron.Domain.Entities.Cargo", b =>
                {
                    b.HasOne("Atron.Domain.Entities.Departamento", "Departamento")
                        .WithMany("Cargos")
                        .HasForeignKey("DepartamentoId", "DepartamentoCodigo");

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("Atron.Domain.Entities.Cliente", b =>
                {
                    b.OwnsOne("Atron.Domain.Entities.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<int>("ClienteId")
                                .HasColumnType("int");

                            b1.Property<string>("CEP")
                                .HasMaxLength(9)
                                .HasColumnType("nvarchar(9)");

                            b1.Property<string>("Cidade")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Logradouro")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Numero")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("UF")
                                .HasMaxLength(2)
                                .HasColumnType("nvarchar(2)");

                            b1.HasKey("ClienteId");

                            b1.ToTable("Clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("Atron.Domain.Entities.Historico", b =>
                {
                    b.HasOne("Atron.Domain.Entities.Auditoria", "Auditoria")
                        .WithMany("Historicos")
                        .HasForeignKey("AuditoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auditoria");
                });

            modelBuilder.Entity("Atron.Domain.Entities.PerfilDeAcesso", b =>
                {
                    b.HasOne("Atron.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId", "UsuarioCodigo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Atron.Domain.Entities.PerfilDeAcessoModulo", b =>
                {
                    b.HasOne("Atron.Domain.Entities.Modulo", "Modulo")
                        .WithMany("PerfilDeAcessoModulos")
                        .HasForeignKey("ModuloId", "ModuloCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Atron.Domain.Entities.PerfilDeAcesso", "PerfilDeAcesso")
                        .WithMany("PerfilDeAcessoModulos")
                        .HasForeignKey("PerfilDeAcessoId", "PerfilDeAcessoCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modulo");

                    b.Navigation("PerfilDeAcesso");
                });

            modelBuilder.Entity("Atron.Domain.Entities.PerfilDeAcessoUsuario", b =>
                {
                    b.HasOne("Atron.Domain.Entities.PerfilDeAcesso", "PerfilDeAcesso")
                        .WithMany("PerfisDeAcessoUsuario")
                        .HasForeignKey("PerfilDeAcessoId", "PerfilDeAcessoCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Atron.Domain.Entities.Usuario", "Usuario")
                        .WithMany("PerfisDeAcessoUsuario")
                        .HasForeignKey("UsuarioId", "UsuarioCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PerfilDeAcesso");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Atron.Domain.Entities.Produto", b =>
                {
                    b.HasOne("Atron.Domain.Entities.Venda", "Venda")
                        .WithMany("Produtos")
                        .HasForeignKey("VendaId");

                    b.Navigation("Venda");
                });

            modelBuilder.Entity("Atron.Domain.Entities.ProdutoCategoria", b =>
                {
                    b.HasOne("Atron.Domain.Entities.Categoria", "Categoria")
                        .WithMany("Produtos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Atron.Domain.Entities.Produto", "Produto")
                        .WithMany("Categorias")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Atron.Domain.Entities.Salario", b =>
                {
                    b.HasOne("Atron.Domain.Entities.Usuario", "Usuario")
                        .WithOne("Salario")
                        .HasForeignKey("Atron.Domain.Entities.Salario", "UsuarioId", "UsuarioCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Atron.Domain.Entities.Tarefa", b =>
                {
                    b.HasOne("Atron.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Tarefas")
                        .HasForeignKey("UsuarioId", "UsuarioCodigo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Atron.Domain.Entities.UsuarioCargoDepartamento", b =>
                {
                    b.HasOne("Atron.Domain.Entities.Cargo", "Cargo")
                        .WithMany("UsuarioCargoDepartamentos")
                        .HasForeignKey("CargoId", "CargoCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Atron.Domain.Entities.Departamento", "Departamento")
                        .WithMany("UsuarioCargoDepartamentos")
                        .HasForeignKey("DepartamentoId", "DepartamentoCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Atron.Domain.Entities.Usuario", "Usuario")
                        .WithMany("UsuarioCargoDepartamentos")
                        .HasForeignKey("UsuarioId", "UsuarioCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("Departamento");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Atron.Domain.Entities.Venda", b =>
                {
                    b.HasOne("Atron.Domain.Entities.Categoria", "Categoria")
                        .WithMany("Vendas")
                        .HasForeignKey("CategoriaId", "CategoriaCodigo")
                        .HasPrincipalKey("Id", "Codigo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Atron.Domain.Entities.Cliente", "Cliente")
                        .WithMany("Vendas")
                        .HasForeignKey("ClienteId", "ClienteCodigo")
                        .HasPrincipalKey("Id", "Codigo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Atron.Domain.Entities.Produto", "Produto")
                        .WithMany("Vendas")
                        .HasForeignKey("ProdutoId", "ProdutoCodigo")
                        .HasPrincipalKey("Id", "Codigo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Cliente");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Shared.Models.ApplicationModels.ApplicationRoleClaim", b =>
                {
                    b.HasOne("Shared.Models.ApplicationModels.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shared.Models.ApplicationModels.ApplicationUserClaim", b =>
                {
                    b.HasOne("Shared.Models.ApplicationModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shared.Models.ApplicationModels.ApplicationUserLogin", b =>
                {
                    b.HasOne("Shared.Models.ApplicationModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shared.Models.ApplicationModels.ApplicationUserRole", b =>
                {
                    b.HasOne("Shared.Models.ApplicationModels.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.ApplicationModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shared.Models.ApplicationModels.ApplicationUserToken", b =>
                {
                    b.HasOne("Shared.Models.ApplicationModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Atron.Domain.Componentes.PropriedadesDeFluxo", b =>
                {
                    b.Navigation("PropriedadesDeFluxoModulo");
                });

            modelBuilder.Entity("Atron.Domain.Entities.Auditoria", b =>
                {
                    b.Navigation("Historicos");
                });

            modelBuilder.Entity("Atron.Domain.Entities.Cargo", b =>
                {
                    b.Navigation("UsuarioCargoDepartamentos");
                });

            modelBuilder.Entity("Atron.Domain.Entities.Categoria", b =>
                {
                    b.Navigation("Produtos");

                    b.Navigation("Vendas");
                });

            modelBuilder.Entity("Atron.Domain.Entities.Cliente", b =>
                {
                    b.Navigation("Vendas");
                });

            modelBuilder.Entity("Atron.Domain.Entities.Departamento", b =>
                {
                    b.Navigation("Cargos");

                    b.Navigation("UsuarioCargoDepartamentos");
                });

            modelBuilder.Entity("Atron.Domain.Entities.Modulo", b =>
                {
                    b.Navigation("PerfilDeAcessoModulos");

                    b.Navigation("PropriedadeDeFluxoModulos");
                });

            modelBuilder.Entity("Atron.Domain.Entities.PerfilDeAcesso", b =>
                {
                    b.Navigation("PerfilDeAcessoModulos");

                    b.Navigation("PerfisDeAcessoUsuario");
                });

            modelBuilder.Entity("Atron.Domain.Entities.Produto", b =>
                {
                    b.Navigation("Categorias");

                    b.Navigation("Vendas");
                });

            modelBuilder.Entity("Atron.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("PerfisDeAcessoUsuario");

                    b.Navigation("Salario");

                    b.Navigation("Tarefas");

                    b.Navigation("UsuarioCargoDepartamentos");
                });

            modelBuilder.Entity("Atron.Domain.Entities.Venda", b =>
                {
                    b.Navigation("Produtos");
                });
#pragma warning restore 612, 618
        }
    }
}
